<?php

/*
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Product extends CI_Controller
{
    function __construct() {
        parent::__construct();
        $this->load->model('Product_model');
    }

    /*
     * Listing of products
     */
    function index() {
        $data['products'] = $this->Product_model->get_all_products();

        $data['_view'] = 'product/index';
        $this->load->view('layouts/main', $data);
    }

    /*
     * Adding a new product
     */
    function add() {
        $this->load->library('form_validation');

        if (isset($_POST) && count($_POST) > 0) {
            $params = array(
                'category_id' => $this->input->post('category_id'),
                'brand_id' => $this->input->post('brand_id'),
                'color_id' => $this->input->post('color_id'),
                'condition_id' => $this->input->post('condition_id'),
                'option_id' => $this->input->post('option_id'),
                'source' => $this->input->post('source'),
                'tracking_no' => $this->input->post('tracking_no'),
                'cubic_feet' => $this->input->post('cubic_feet'),
                'model_no' => $this->input->post('model_no'),
                'serial_no' => $this->input->post('serial_no'),
                'feature1' => $this->input->post('feature1'),
                'feature2' => $this->input->post('feature2'),
                'feature3' => $this->input->post('feature3'),
                'price' => $this->input->post('price'),
                'comparable_price' => $this->input->post('comparable_price'),
                'height' => $this->input->post('height'),
                'width' => $this->input->post('width'),
                'depth' => $this->input->post('depth'),
                'title' => $this->input->post('title'),
                'created' => $this->input->post('created'),
                'updated' => $this->input->post('updated'),
                'description' => $this->input->post('description'),
                'tags' => $this->input->post('tags'),
                'accessories' => $this->input->post('accessories'),
            );

            $product_id = $this->Product_model->add_product($params);
            redirect('product/index');
        } else {
            $this->load->model('Category_model');
            $data['all_categories'] = $this->Category_model->get_categories_dropdown_html();

            $this->load->model('Brand_model');
            $data['all_brands'] = $this->Brand_model->get_all_brands();

            $this->load->model('Color_model');
            $data['all_colors'] = $this->Color_model->get_all_colors();

            $this->load->model('Condition_model');
            $data['all_conditions'] = $this->Condition_model->get_all_conditions();

            $this->load->model('Option_model');
            $data['all_options'] = $this->Option_model->get_all_options();

            $data['_view'] = 'product/add';
            $this->load->view('layouts/main', $data);
        }
    }

    /*
     * Editing a product
     */
    function edit($id) {
        // check if the product exists before trying to edit it
        $data['product'] = $this->Product_model->get_product($id);

        if (isset($data['product']['id'])) {
            if (isset($_POST) && count($_POST) > 0) {
                $params = array(
                    'category_id' => $this->input->post('category_id'),
                    'brand_id' => $this->input->post('brand_id'),
                    'color_id' => $this->input->post('color_id'),
                    'condition_id' => $this->input->post('condition_id'),
                    'option_id' => $this->input->post('option_id'),
                    'source' => $this->input->post('source'),
                    'tracking_no' => $this->input->post('tracking_no'),
                    'cubic_feet' => $this->input->post('cubic_feet'),
                    'model_no' => $this->input->post('model_no'),
                    'serial_no' => $this->input->post('serial_no'),
                    'feature1' => $this->input->post('feature1'),
                    'feature2' => $this->input->post('feature2'),
                    'feature3' => $this->input->post('feature3'),
                    'price' => $this->input->post('price'),
                    'comparable_price' => $this->input->post('comparable_price'),
                    'height' => $this->input->post('height'),
                    'width' => $this->input->post('width'),
                    'depth' => $this->input->post('depth'),
                    'title' => $this->input->post('title'),
                    'created' => $this->input->post('created'),
                    'updated' => $this->input->post('updated'),
                    'description' => $this->input->post('description'),
                    'tags' => $this->input->post('tags'),
                    'accessories' => $this->input->post('accessories'),
                );

                $this->Product_model->update_product($id, $params);
                redirect('product/index');
            } else {
                $this->load->model('Category_model');
                $data['all_categories'] = $this->Category_model->get_all_categories();

                $this->load->model('Brand_model');
                $data['all_brands'] = $this->Brand_model->get_all_brands();

                $this->load->model('Color_model');
                $data['all_colors'] = $this->Color_model->get_all_colors();

                $this->load->model('Condition_model');
                $data['all_conditions'] = $this->Condition_model->get_all_conditions();

                $this->load->model('Option_model');
                $data['all_options'] = $this->Option_model->get_all_options();

                $data['_view'] = 'product/edit';
                $this->load->view('layouts/main', $data);
            }
        } else
            show_error('The product you are trying to edit does not exist.');
    }

    /*
     * Deleting product
     */
    function remove($id) {
        $product = $this->Product_model->get_product($id);

        // check if the product exists before trying to delete it
        if (isset($product['id'])) {
            $this->Product_model->delete_product($id);
            redirect('product/index');
        } else
            show_error('The product you are trying to delete does not exist.');
    }

}
