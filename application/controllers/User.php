<?php

/*
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
require_once __DIR__.'/Auth_Controller.php';

class User extends Auth_Controller
{
    function __construct() {
        parent::__construct();
        $this->load->model('User_model');
        $this->load->model('Permission_group_model');
        $this->load->library('form_validation');
    }

    /*
     * Listing of users
     */
    function index() {

        if (!$this->permission->has_permission('view_users')) {
            show_error('You do not have this permission!');
        }

        $data['users'] = $this->User_model->get_all_users();

        $data['_view'] = 'user/index';
        $this->load->view('layouts/main', $data);
    }

    /*
     * Adding a new user
     */
    function add() {

        if (!$this->permission->has_permission('create_user')) {
            show_error('You do not have this permission!');
        }

        $data['permission_groups'] = $this->Permission_group_model->get_all_permission_groups();
        $data['_view'] = 'user/add';

        if (isset($_POST) && count($_POST) > 0) {

            $this->form_validation->set_rules('email', 'Email', 'required|is_unique[users.email]|max_length[50]|valid_email');
            $this->form_validation->set_rules('name', 'Name', 'required|is_unique[users.name]|max_length[50]|alpha_numeric_spaces');
            $this->form_validation->set_rules('address', 'Address', 'required|max_length[255]');
            $this->form_validation->set_rules('password', 'password', 'required|min_length[6]|max_length[50]');

            $params = array(
                'password' => $this->input->post('password'),
                'email' => $this->input->post('email'),
                'permission_group' => $this->input->post('permissionID'),
                'name' => $this->input->post('name'),
                'address' => $this->input->post('address')
            );

            if ($this->form_validation->run()) {
                $user_id = $this->User_model->add_user($params);
                redirect('user/index');
            } else {
                $this->load->view('layouts/main', $data);
            }

        } else {
            $this->load->view('layouts/main', $data);
        }
    }

    /*
     * Editing a user
     */
    function edit($id) {

        if (!$this->permission->has_permission('edit_user')) {
            show_error('You do not have this permission!');
        }

        $data['_view'] = 'user/edit';
        $data['permission_groups'] = $this->Permission_group_model->get_all_permission_groups();
        // check if the user exists before trying to edit it
        $data['user'] = $this->User_model->get_user($id);

        if (isset($data['user']['id'])) {
            if (isset($_POST) && count($_POST) > 0) {

                $this->form_validation->set_rules('email', 'Email', 'required|max_length[50]|valid_email');
                $this->form_validation->set_rules('name', 'Name', 'required|max_length[50]|alpha_numeric_spaces');
                $this->form_validation->set_rules('address', 'Address', 'required|max_length[255]');

                $params = array(
                    'email' => $this->input->post('email'),
                    'permission_group' => $this->input->post('permissionID'),
                    'name' => $this->input->post('name'),
                    'address' => $this->input->post('address')
                );

                if ($this->input->post('password')) {
                    $this->form_validation->set_rules('password', 'password', 'min_length[6]|max_length[50]');
                    $params['password'] = sha1($this->input->post('password'));
                }

                if ($this->form_validation->run()) {
                    $this->User_model->update_user($id, $params);
                    redirect('user/index');
                } else {
                    $this->load->view('layouts/main', $data);
                }

            } else {
                $this->load->view('layouts/main', $data);
            }
        } else
            show_error('The user you are trying to edit does not exist.');
    }

    /*
     * Deleting user
     */
    function remove($id) {

        if (!$this->permission->has_permission('delete_user')) {
            show_error('You do not have this permission!');
        }

        $user = $this->User_model->get_user($id);

        // check if the user exists before trying to delete it
        if (isset($user['id'])) {
            $this->User_model->delete_user($id);
            redirect('user/index');
        } else
            show_error('The user you are trying to delete does not exist.');
    }

}
